/**
 * Ext.defineは、Senchaフレームワークにおけるクラス定義用の
 * メソッドになります
 *
 * 第1引数：クラス名
 * 第2引数：コンフィグオブジェクト
 *
 * 第1引数にクラス名を定義し、独自プロパティおよびメソッドや
 * 既存クラスのプロパティの上書きなどは、第2引数のコンフィグ
 * プロパティに定義を行っていきます。
 *
 * メモ帳の一覧と編集パネルを内包した
 * コンテナークラス
 */
Ext.define('App.view.Main', {

    /**
     * 継承する親クラス名を指定するためのプロパティ
     * ここでは、Ext.Containerクラスを継承しています
     */
    extend: 'Ext.Container',

    /**
     * このクラスで必要となるクラスがあった場合
     * このプロパティに各クラスのフルパスを記載
     * することで、このクラスが生成されるタイミングで
     * requiresプロパティに定義したクラスが
     * 読み込まれていなかったら、自動で読み込んでくれる
     *
     * このクラスでは、一覧と編集画面のクラスが必要に
     * なるため、下記のように定義を行う
     */
    requires: [
        'App.view.List',
        'App.view.Edit'
    ],

    /**
     * itemsプロパティなどで良く利用されるxtypeを
     * 指定できる
     */
    xtype: 'app-main',

    /**
     * layoutやitemsなどコンフィグオプションと呼ばれるものは
     * configプロパティ内に定義を行う
     */
    config: {

        /**
         * レイアウトタイプを指定する
         *
         * ここで指定を行っているcardレイアウトは、紙芝居の
         * ように、パネルを重ね合わせてページ遷移を可能にする
         * レイアウト方式
         */
        layout: 'card',

        /**
         * このクラスに表示させるコンポーネントの指定を行う
         * ためのプロパティ
         *
         * 1つであればオブジェクトリテラルのみ、複数ある場合は
         * 下記のように配列で括り、その中にリテラルで指定を行う
         *
         * 下記のようにxtypeのみの場合や、ここにまとめてstyleや
         * titleなども定義することが可能
         *
         * また、layoutがcardに設定されているため初期表示時は
         * app-editは表示されず、app-listが表示された状態で
         * アプリケーションが起動する
         */
        items: [{
            xtype: 'app-list'
        }, {
            xtype: 'app-edit'
        }]

    }

});
