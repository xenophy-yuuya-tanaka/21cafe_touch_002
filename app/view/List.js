/**
 * Ext.defineは、Senchaフレームワークにおけるクラス定義用の
 * メソッドになります
 *
 * 第1引数：クラス名
 * 第2引数：コンフィグオブジェクト
 *
 * 第1引数にクラス名を定義し、独自プロパティおよびメソッドや
 * 既存クラスのプロパティの上書きなどは、第2引数のコンフィグ
 * プロパティに定義を行っていきます。
 *
 * メモ帳一覧画面コンポーネント
 */
Ext.define('App.view.List', {

    /**
     * 一覧画面で利用する親クラス
     * シンプルな一覧系の画面には
     * Ext.dataview.Listコンポーネントを利用します
     */
    extend: 'Ext.dataview.List',

    /**
     * このコンポーネントを利用する際に
     * xtypeで定義を行えるようにするため
     * xtypeを指定しておく
     *
     * App.view.Mainクラスを見てもらえると
     * itemsプロパティ内で、このxtypeを利用して
     * コンポーネントを指定していることが分かります
     */
    xtype: 'app-list',

    /**
     * layoutやitemsなどコンフィグオプションと呼ばれるものは
     * configプロパティ内に定義を行う
     */
    config: {

        /**
         * レイアウトタイプを指定する
         *
         * 親コンテナーのサイズにフィットする形で表示を行う
         * レイアウトタイプを指定しています
         */
        layout: 'fit',

        /**
         * このコンポーネントが継承しているExt.dataview.Listクラスは
         * Storeクラスをバインドすることによって、Store内のデータを
         * 自動的に表示することが可能になります
         *
         * 指定する際は、Storeのクラス名を定義します（フルパスではなく）
         */
        store: 'Notes',  // App.store.Notes

        /**
         * Ext.dataview.Listコンポーネントの一覧を表示する際に
         * データを元にどのような表示を行うかを定義できる
         * テンプレートプロパティになります。
         * 通常バインドするデータの構造を元にテンプレートを記述します
         *
         * 例：
         *  - バインドするデータ
         *  [{
         *      text: 'Test1',
         *      update: '2014/01/01'
         *  }, {
         *      text: 'Test2',
         *      update: '2014/01/02'
         *  }]
         *  
         *  - 定義するテンプレート
         *  '{text} - {update}'
         *
         *  - 出力される結果
         *  -----------------------------------
         *  Test1 - 2014/01/01
         *  -----------------------------------
         *  Test2 - 2014/01/02
         *  -----------------------------------
         */
        itemTpl: '{text}  -  {update}',

        /**
         * このコンポーネントが内包するコンポーネントを定義
         */
        items: [{
            xtype: 'titlebar',
            title: 'memo',
            /**
             * dockedプロパティを定義することで、親のコンテナーに
             * ドッキングさせることが出来ます
             *
             * ここでは、docked: 'top'と定義しているので、親コンテナーに
             * よく見られる固定されたタイトルバーのような形で設置する
             * ことが出来ます
             */
            docked: 'top',

            /**
             * 更に内包するコンポーネントの定義を行います
             * 
             * ここで定義を行っているコンポーネントには、xtypeの
             * 指定はありませんがxtype: 'titlebar'が内包するコンポーネントは
             * デフォルト値としてxtype: 'button'が割り当てられます
             *
             * このように、各コンポーネントによって内包するコンポーネントの
             * デフォルト値が決まっているものがあります
             */
            items: [{
                text: 'New',
                /**
                 * Ext.Buttonクラス自体には、actionという名前のプロパティは
                 * 存在しませんが、この独自プロパティを定義することにより
                 * controller側でのボタンハンドリングを楽に行えます
                 */
                action: 'new',
                align: 'right'
            }]
        }]

    }

});
