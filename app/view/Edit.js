/**
 * Ext.defineは、Senchaフレームワークにおけるクラス定義用の
 * メソッドになります
 *
 * 第1引数：クラス名
 * 第2引数：コンフィグオブジェクト
 *
 * 第1引数にクラス名を定義し、独自プロパティおよびメソッドや
 * 既存クラスのプロパティの上書きなどは、第2引数のコンフィグ
 * プロパティに定義を行っていきます。
 *
 * メモ帳編集画面コンポーネント
 */
Ext.define('App.view.Edit', {

    /**
     * 複数の入力フィールドを要し、登録などを
     * 行うような画面については、フォーム用の
     * Ext.form.Panelコンポーネントを利用します
     */
    extend: 'Ext.form.Panel',

    /**
     * このコンポーネントを利用する際に
     * xtypeで定義を行えるようにするため
     * xtypeを指定しておく
     *
     * App.view.Mainクラスを見てもらえると
     * itemsプロパティ内で、このxtypeを利用して
     * コンポーネントを指定していることが分かります
     */
    xtype: 'app-edit',

    /**
     * layoutやitemsなどコンフィグオプションと呼ばれるものは
     * configプロパティ内に定義を行う
     */
    config: {

        /**
         * レイアウトタイプを指定する
         *
         * 単純にレイアウトタイプを指定する場合は
         * layout: 'vbox'というような形で、文字列
         * 指定のみで可能だが、vboxレイアウトのalignプロパティなどを
         * 指定したい場合は下記のように、オブジェクトリテラルで指定
         * する必要があります
         */
        layout: {
            type: 'vbox'
        },

        /**
         * 内包するコンポーネント（入力フィールド）
         *
         */
        items: [{
            /**
             * 複数行入力することが出来るテキストフィールド
             */
            xtype: 'textareafield',
            /**
             * 入力フィールドは、labelプロパティを定義することで
             * そのフィールドのタイトルを表示させることが出来ます
             */
            label: 'memo',
            /**
             * バックエンドにデータを送信する際のKEYになる名称
             */
            name: 'text',
            /**
             * 入力エリアがからの場合に表示させるテキスト
             */
            placeHolder: '内容を入力...',
            height: 400
        }, {
            /**
             * 1行のみを想定したテキストフィールド
             */
            xtype: 'textfield',
            label: 'date',
            name: 'update',
            /**
             * 入力フィールドコンポーネントに備わっている
             * 少し特殊なプロパティ
             *
             * このプロパティをtrueに設定すると、入力不可にすることが出来ます
             * また、readOnly: true時のみ付与されるcssのclassもあるため
             * 読み取り専用時のみ見た目を変化させるといったことも可能です
             */
            readOnly: true
        }, {
            xtype: 'toolbar',
            docked: 'top',
            items: [{
                text: 'Back',
                /**
                 * Ext.Buttonクラス自体には、actionという名前のプロパティは
                 * 存在しませんが、この独自プロパティを定義することにより
                 * controller側でのボタンハンドリングを楽に行えます
                 */
                action: 'back',
                /**
                 * uiプロパティは、コンポーネントの見た目を簡単に切り替える
                 * ためのプロパティになります。
                 * このプロパティを設定すると、コンポーネントに対してcssクラスが
                 * 付与され、それに沿った表示になります
                 *
                 * 例：下記で指定している'back'は、戻るボタンのような形状になる
                 *
                 * また、このuiは開発者側で独自で定義を行うことも可能です
                 */
                ui: 'back'
            }, {
                xtype: 'spacer'
            }, {
                text: 'Save',
                /**
                 * handlerプロパティは、そのコンポーネントでよく使われる
                 * イベントが割り当てられ、関数を設定することにより簡単に
                 * イベント発火時の処理を実装することが可能
                 *
                 * 例：Ext.Buttonの場合は、clickイベント
                 *
                 * 基本UIからの入力操作のハンドリングは、コントローラー側で
                 * 行いますが、下記のような独自イベントの発火や簡易的な処理を
                 * 行う場合などに利用されます
                 */
                handler: function(button) {
                    var form = button.up('app-edit'),
                        vals = form.getValues();

                    /**
                     * 独自イベントの発火
                     *
                     * 第1引数：独自イベント名
                     * 第2引数：リッスンする関数側の引数
                     */
                    form.fireEvent('app-memo-save', vals);
                }
            }]
        }]

        }

    });
